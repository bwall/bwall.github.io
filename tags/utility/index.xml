<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Utility on @botnet_hunter&#39;s blog</title>
    <link>https://bwall.github.io/tags/utility/</link>
    <description>Recent content in Utility on @botnet_hunter&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Â© 2015 Copyright Brian Wallace</copyright>
    <lastBuildDate>Sun, 04 Oct 2015 17:59:07 -0700</lastBuildDate>
    <atom:link href="https://bwall.github.io/tags/utility/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Using bamfdetect </title>
      <link>https://bwall.github.io/bamfdetect/</link>
      <pubDate>Sun, 04 Oct 2015 17:59:07 -0700</pubDate>
      
      <guid>https://bwall.github.io/bamfdetect/</guid>
      <description>

&lt;p&gt;When hunting botnets, whether they are custom developed or widely available, it can be helpful to statically extract configurations.  With this ability, an automated workflow can be developed to identify and track botnets at scale.  For this reason, I have developed &lt;a href=&#34;https://github.com/bwall/bamfdetect&#34;&gt;bamfdetect&lt;/a&gt;.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h1 id=&#34;bamfdetect:edf56eff04a8abdbcf184973e6c4191b&#34;&gt;bamfdetect&lt;/h1&gt;

&lt;p&gt;bamfdetect is a tool which is designed to identify malware samples and statically extract their configuration information, such as the domain name of the command and control server.  It is capable of taking in a single file path, or a variety of file paths.  It supports searching inside of directories, archives, etc. Once it identifies files to process, it starts processing through groups of modules.  The modules are as follows.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Preprocessors&lt;/li&gt;
&lt;li&gt;Bot Modules&lt;/li&gt;
&lt;li&gt;Postprocessors&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;preprocessors:edf56eff04a8abdbcf184973e6c4191b&#34;&gt;Preprocessors&lt;/h2&gt;

&lt;p&gt;Preprocessors have the ability to modify the file before being processed by the bot modules.  This can be useful if files are somehow packed or obfuscated.  The only currently (at the time of this blog being written) implemented preprocessor is the UPX decompressor.  This identifies if the input file is UPX compressed, then uses the UPX binary installed on the system to decompress it.  This functionality may be removed in the near future.&lt;/p&gt;

&lt;p&gt;A planned preprocessor module is a reimplementation of the PHP decoder I have running &lt;a href=&#34;https://defense.ballastsecurity.net/decoding/index.php&#34;&gt;here&lt;/a&gt;.  This would deobfuscate PHP files being processed.&lt;/p&gt;

&lt;h2 id=&#34;bot-modules:edf56eff04a8abdbcf184973e6c4191b&#34;&gt;Bot Modules&lt;/h2&gt;

&lt;p&gt;Bot modules are the heart of bamfdetect.  These modules are implemented in two portions, the identifier and the extractor.  The identifiers, all of which are currently Yara signatures, identify whether a file being analyzed is a bot supported by the bot module.  Since bot modules tend to focus on a single bot type or a family of very similar bots, this generally confirms that the module is likely capable of extracting the configuration.&lt;/p&gt;

&lt;p&gt;The configuration extraction is then done with Python code.  Configuration extraction can be very strict or very loose, depending on how reliably the configuration is stored in the malware.  Admitedly, in some cases, the configuration extraction methods have been implemented somewhat lazily, so false positives and improperly extracted configurations are possible.&lt;/p&gt;

&lt;h2 id=&#34;postprocessors:edf56eff04a8abdbcf184973e6c4191b&#34;&gt;Postprocessors&lt;/h2&gt;

&lt;p&gt;The purpose of postprocessor modules are to run after a file has been identified by at least one module.  The postprocessor modules also have access to the extracted configuration information, so they can be acted upon.  The only currently included postprocessing module calculates hashes on the file that was processed.  I do have a few private postprocessing modules which I will mention shortly.&lt;/p&gt;

&lt;h1 id=&#34;workflow:edf56eff04a8abdbcf184973e6c4191b&#34;&gt;Workflow&lt;/h1&gt;

&lt;p&gt;bamfdetect is a wonderful component of my malware tracking workflow.  Clearly, I&amp;rsquo;m not about to give away all my secrets right now, but here is a sample workflow which can be done with bamfdetect.&lt;/p&gt;

&lt;p&gt;
&lt;figure &gt;
    
        &lt;img src=&#34;https://bwall.github.io/images/bamfworkflow.png&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;Bot tracking workflow&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;Since bamfdetect has Yara signatures defined inside of it, these Yara signatures can be used in services such as VirusTotal Hunting in order to hunt for relevant samples.  One can very simply download all files that trigger VirusTotal Hunting, and then feed them into bamfdetect.  Files can also be fed in through a variety of other sources.&lt;/p&gt;

&lt;p&gt;In order to make use of this, we can create a postprocessing module for bamfdetect which will upload any command and control information to our botnet tracking system.  Since very few people utilize publicly available systems for this, the code below is very generic.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;from BAMF_Detect.postprocessors.common import Postprocessor, Postprocessors
import httplib
import urllib
import json


def submit_c2(c2_uri, bot_type, source, api_key):
    try:
        params = urllib.urlencode({&#39;api_key&#39;: api_key, &#39;uri&#39;: c2_uri, &#39;bot_type&#39;: bot_type, &#39;source&#39;: source})
        headers = {&amp;quot;Content-type&amp;quot;: &amp;quot;application/x-www-form-urlencoded&amp;quot;, &amp;quot;Accept&amp;quot;: &amp;quot;text/plain&amp;quot;}
        conn = httplib.HTTPSConnection(&amp;quot;c2_tracking.example.com&amp;quot;)
        conn.request(&amp;quot;POST&amp;quot;, &amp;quot;/upload_c2&amp;quot;, params, headers)
        response = conn.getresponse()
        data = response.read()
        conn.close()
        return json.loads(data)
    except KeyboardInterrupt:
        raise
    except:
        pass


class SubmitPanel(Postprocessor):
    def __init__(self):
        Postprocessor.__init__(
            self,
            name=&amp;quot;Hashes&amp;quot;,
            author=&amp;quot;Brian Wallace (@botnet_hunter)&amp;quot;,
            date=&amp;quot;March 14th, 2015&amp;quot;,
            description=&amp;quot;Submits panel to C2 database&amp;quot;,
            references=&amp;quot;&amp;quot;,
            version=&amp;quot;1.0.0.0&amp;quot;
        )

    def _do_processing(self, file_data, config):
        if &amp;quot;information&amp;quot; in config:
            configuration = config[&amp;quot;information&amp;quot;]
            bot_type = config[&amp;quot;type&amp;quot;].lower()

            if &amp;quot;c2_uri&amp;quot; in configuration:
                # Simple bot setup
                submit_c2(configuration[&amp;quot;c2_uri&amp;quot;], bot_type, &amp;quot;bamfdetect&amp;quot;, &amp;quot;api-key&amp;quot;)
            elif &amp;quot;c2s&amp;quot; in configuration:
                for c in configuration[&amp;quot;c2s&amp;quot;]:
                    if &amp;quot;c2_uri&amp;quot; in c:
                        submit_c2(c[&amp;quot;c2_uri&amp;quot;], bot_type, &amp;quot;bamfdetect&amp;quot;, &amp;quot;api-key&amp;quot;)

        return {}, file_data

Postprocessors.add_postprocessor(SubmitPanel())
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This way, anytime we scan a file, the command and control information will be uploaded to c2_tracking.example.com to be automatically tracked.  This is one of the methods I use to feed my botnet tracking platform.&lt;/p&gt;

&lt;p&gt;
&lt;figure &gt;
    
        &lt;img src=&#34;https://bwall.github.io/images/tracking.png&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;Bot tracking panel&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;

&lt;a href=&#34;https://gist.github.com/bwall/aa3bf86bd2f2396d6ef5&#34;&gt;Tracking panel source&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Extract Hosts</title>
      <link>https://bwall.github.io/extract-hosts/</link>
      <pubDate>Fri, 18 Apr 2014 10:19:07 -0700</pubDate>
      
      <guid>https://bwall.github.io/extract-hosts/</guid>
      <description>

&lt;p&gt;Recently, I have been trying to focus more on creating small but useful utilities.  The first of these tools to be posted publicly is &lt;a href=&#34;https://github.com/bwall/ExtractHosts&#34;&gt;Extract Hosts&lt;/a&gt;.  The purpose of this utility is to search for domain names and IP addresses in the supplied input.  The following is information posted to the readme on the project page.  You can download the 1.1.0 release of Extract Hosts &lt;a href=&#34;https://github.com/bwall/ExtractHosts/archive/v1.1.0.zip&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h1 id=&#34;extracthosts:8154605aecfea6ca754b3151f752e9f0&#34;&gt;ExtractHosts&lt;/h1&gt;

&lt;p&gt;Extracts hosts (IP/Hostnames) from files.  Hosts can be extracted from text files, PE, etc.  Any file that keeps the
host in plaintext without obscuring it, this should extract it.&lt;/p&gt;

&lt;p&gt;The name came about when polling random people on the street about the idea, and they responded, &amp;ldquo;eh?&amp;rdquo;.  With this installed,
all you need to type is &amp;lsquo;eh&amp;rsquo; to start pulling hosts from input.&lt;/p&gt;

&lt;h1 id=&#34;installation:8154605aecfea6ca754b3151f752e9f0&#34;&gt;Installation&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;git clone https://github.com/bwall/ExtractHosts.git
cd ExtractHosts
sudo python setup.py install
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;examples:8154605aecfea6ca754b3151f752e9f0&#34;&gt;Examples&lt;/h1&gt;

&lt;p&gt;The following are just some example usages&lt;/p&gt;

&lt;h2 id=&#34;help:8154605aecfea6ca754b3151f752e9f0&#34;&gt;help&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;bwall@research:~$ eh -h
usage: /usr/local/bin/eh [-h] [-v] [-r] [-f] [-d] [-T] [path [path ...]]

Identifies and extracts domains and IPs from files

positional arguments:
  path                  Paths to files or directories to scan (if not
                        supplied, stdin is the file being read)

optional arguments:
  -h, --help            show this help message and exit
  -v, --version         show program&#39;s version number and exit
  -r, --recursive       Scan paths recursively
  -f, --show-files      Show file names along with results
  -d, --hide-duplicates
                        Hide duplicate results (hides per file when show-files
                        is enabled)
  -s, --strict          Stricter processing of domains
  -T, --test            Run some quick self tests

/usr/local/bin/eh v1.1.0 by Brian Wallace (@botnet_hunter)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;wget:8154605aecfea6ca754b3151f752e9f0&#34;&gt;wget&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;bwall@research:~$ wget http://bwall.github.io/ -qO- | eh -d
bwall.github.io
twitter.com
gmail.com
github.com
README.md
ajax.googleapis.com
crypto-js.googlecode.com
google-analytics.com
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;malware:8154605aecfea6ca754b3151f752e9f0&#34;&gt;malware&lt;/h2&gt;

&lt;p&gt;The 0686429b86844d9d1a14a159a0263b9bfcea4fd247c77537aa0278c9c5cb4ac3 file is a sample of the POS malware, Dexter, created for demo purposes.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;bwall@research:~$ eh 0686429b86844d9d1a14a159a0263b9bfcea4fd247c77537aa0278c9c5cb4ac3
houseofcarders.com
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;file-system-recursion:8154605aecfea6ca754b3151f752e9f0&#34;&gt;File system recursion&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;bwall@research:~$ eh -drf Downloads/PEStudio/
/home/bwall/Downloads/PEStudio/PeStudioFunctionsDeprecated.xml  www.winitor.com
/home/bwall/Downloads/PEStudio/PeStudioFunctionsDeprecated.xml  msdn.microsoft.com
/home/bwall/Downloads/PEStudio/PeStudioBlackListFunctions.xml   www.winitor.com
/home/bwall/Downloads/PEStudio/PeStudioEvasions.xml www.winitor.com
/home/bwall/Downloads/PEStudio/PeStudioIndicators.xml   www.winitor.com
/home/bwall/Downloads/PEStudio/ChangeLog.txt    winitor.com
/home/bwall/Downloads/PEStudio/ChangeLog.txt    www.winitor.com
/home/bwall/Downloads/PEStudio/PeStudioThresholds.xml   www.winitor.com
/home/bwall/Downloads/PEStudio/PeStudioWhiteListSections.xml    www.winitor.com
/home/bwall/Downloads/PEStudio/PeStudioBlackListLibraries.xml   www.winitor.com
/home/bwall/Downloads/PEStudio/PeStudioOrdinals.xml www.winitor.com
/home/bwall/Downloads/PEStudio/PeStudioVirusTotal.xml   www.winitor.com
/home/bwall/Downloads/PEStudio/PeStudioCodePages.xml    www.winitor.com
/home/bwall/Downloads/PEStudio/PeStudioCodePages.xml    msdn.microsoft.com
/home/bwall/Downloads/PEStudio/PeStudioWhiteListLibraries.xml   www.winitor.com
/home/bwall/Downloads/PEStudio/PeStudioFeatures.xml www.winitor.com
/home/bwall/Downloads/PEStudio/PeStudio.exe 6.0.0.0
/home/bwall/Downloads/PEStudio/PeStudioSettings.xml www.winitor.com
/home/bwall/Downloads/PEStudio/PeStudioBlackListStrings.xml www.winitor.com
/home/bwall/Downloads/PEStudio/PeStudioBlackListStrings.xml internetmailru.cdnmail.ru
/home/bwall/Downloads/PEStudio/PeStudioBlackListStrings.xml sputnik.mail.ru
/home/bwall/Downloads/PEStudio/PeStudioBlackListStrings.xml mail.ru
/home/bwall/Downloads/PEStudio/PeStudioBlackListStrings.xml Command.com
/home/bwall/Downloads/PEStudio/PeStudioBlackListStrings.xml 127.0.0.1
/home/bwall/Downloads/PEStudio/PeStudioBlackListStrings.xml 2.0.0.1
/home/bwall/Downloads/PEStudio/PeStudioBlackListStrings.xml www.memtest86.com
/home/bwall/Downloads/PEStudio/PeStudioBlackListStrings.xml boxedapp.com
/home/bwall/Downloads/PEStudio/PeStudioBlackListStrings.xml PAYPAL.COM
/home/bwall/Downloads/PEStudio/PeStudioBlackListStrings.xml start.spoon.net
/home/bwall/Downloads/PEStudio/PeStudioFunctionsUndocumented.xml    www.winitor.com
/home/bwall/Downloads/PEStudio/PeStudioWellKnownResources.xml   www.winitor.com
/home/bwall/Downloads/PEStudio/PeStudioFunctionsMapping.xml www.winitor.com
/home/bwall/Downloads/PEStudio/PeParser.dll 776::06
/home/bwall/Downloads/PEStudio/PeParser.dll ::
/home/bwall/Downloads/PEStudio/PeParser.dll 3::
/home/bwall/Downloads/PEStudio/PeStudioTranslations.xml www.winitor.com
/home/bwall/Downloads/PEStudio/PeStudioBlackListLanguages.xml   www.winitor.com
/home/bwall/Downloads/PEStudio/PeStudioBlackListLanguages.xml   msdn.microsoft.com
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;change-log:8154605aecfea6ca754b3151f752e9f0&#34;&gt;Change log&lt;/h1&gt;

&lt;h2 id=&#34;version-1-1-0:8154605aecfea6ca754b3151f752e9f0&#34;&gt;Version 1.1.0&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Files are no longer loaded completely into RAM so larger files can be processed (performance increase noticed)&lt;/li&gt;
&lt;li&gt;Strict mode added, where domains are only considered if all lower case&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;todo:8154605aecfea6ca754b3151f752e9f0&#34;&gt;TODO&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;IPv6 regex needs to be shorted and heavily tested&lt;/li&gt;
&lt;li&gt;Heavier testing&lt;/li&gt;
&lt;li&gt;Improve performance&lt;/li&gt;
&lt;li&gt;Multiple core processing support&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>